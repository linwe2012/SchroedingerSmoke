// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitBuffer
#pragma kernel Shoedinger
#pragma kernel Normalize

#pragma kernel VelocityOneForm
#pragma kernel ComputeDivergence
#pragma kernel PossionSpectral
#pragma kernel GaugeTransform

#pragma kernel InitializePsi
#pragma kernel ReprojectVelocityToGrid

#define THE_THREDS [numthreads(8, 8, 8)]

// 为小型的任务分配的线程数量
#define MINI_THREADS [numthreads(8, 8, 8)]
#define PI 3.1415926535898

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float2> SchroedingerMul;
RWTexture3D<float> PossionMul;
RWTexture3D<float2> Psi1;
RWTexture3D<float2> Psi2;
RWTexture3D<float4> Velocity;
RWTexture3D<float2> Divergence;

RWTexture3D<float> Nozzle;
RWTexture3D<float4> DebugOutput;

// 在 nozzle mask 中的 center
float3 nozzle_ralative_center;
// 相对整个三维网格的 center
float3 nozzle_center;
float nozzle_radius;
float3 nozzle_dir;
float3 nozzle_topleft;
float nozzle_length;
float3 nozzle_velocity;
float omega_t;

float3 size; // 空间上的大小
uint3 res;    // 空间上网格的分割数量
float hbar;  // 约化普朗克常数, hbar = h / (2*pi)
float dt;    // 时间


inline float2 complexMul(float2 a, float2 b)
{
    return float2(
		a.x * b.x - a.y * b.y,
		a.x * b.y + a.y * b.x
	);
}

// 初始化预计算的 薛定谔 & 泊松在频域上的乘子
THE_THREDS
void InitBuffer(int3 id : SV_DispatchThreadID)
{
    // 薛定谔在频域上时间上积分的乘子
    {
        float3 k = (float3(id) - (res >> 1)) / size;
        float fac = -4 * PI * PI * hbar;
        float lambda = fac * dot(k, k);
        float intern = lambda * dt / 2.0f;
        SchroedingerMul[id.xyz] = float2(cos(intern), sin(intern));
    }
    
    // 泊松方程在频域上积分的乘子
    {
        float3 grid_sz = size / res;
        float3 s = sin(PI * id / res) / grid_sz;
        float denom = dot(s, s);
        float res = -0.25 / denom;
        int is_zero = id.x | id.y | id.z;
        // 虽然分支效率很低, 但是这个只要模拟开始的时候执行一次就行了
        if (!is_zero)
        {
            res = 0;
        }
        
        PossionMul[id.xyz] = res;
    }
}


// Psi1, Psi2: 波函数
// SchroedingerMul: 预计算
THE_THREDS
void Shoedinger(uint3 id : SV_DispatchThreadID)
{
    Psi1[id] = complexMul(Psi1[id], SchroedingerMul[id]);
    Psi2[id] = complexMul(Psi2[id], SchroedingerMul[id]);
}

// Psi1, Psi2: 波函数
// hbar
THE_THREDS
void VelocityOneForm(uint3 id : SV_DispatchThreadID)
{
    // Step1, Compute Velocity One Form
    
    int3 pos = (id + 1) % res;
    float2 conj_psi1 = Psi1[id];
    float2 conj_psi2 = Psi2[id];
    
    conj_psi1.y *= -1;
    conj_psi2.y *= -1;
    
    int3 pos_x = int3(pos.x, id.y, id.z);
    int3 pos_y = int3(id.x, pos.y, id.z);
    int3 pos_z = int3(id.x, id.y, pos.z);
    
    float2 cx = complexMul(conj_psi1, Psi1[pos_x]) + complexMul(conj_psi2, Psi2[pos_x]);
    float2 cy = complexMul(conj_psi1, Psi1[pos_y]) + complexMul(conj_psi2, Psi2[pos_y]);
    float2 cz = complexMul(conj_psi1, Psi1[pos_z]) + complexMul(conj_psi2, Psi2[pos_z]);
    
    float x = atan2(cx.y, cx.x);
    float y = atan2(cy.y, cy.x);
    float z = atan2(cz.y, cz.x);
    
    float3 oneform = float3(x, y, z);
    oneform *= hbar;

    Velocity[id] = float4(oneform, 0);
}

// size, res, hbar
THE_THREDS
void ComputeDivergence(int3 id : SV_DispatchThreadID)
{
    int3 pos = (id + res - 1) % res;
    
    float3 grid_sz = size / res;
    grid_sz = grid_sz * grid_sz;
    
    int3 pos_x = int3(pos.x, id.y, id.z);
    int3 pos_y = int3(id.x, pos.y, id.z);
    int3 pos_z = int3(id.x, id.y, pos.z);
    
    float form_x = Velocity[id].x - Velocity[pos_x].x;
    float form_y = Velocity[id].y - Velocity[pos_y].y;
    float form_z = Velocity[id].z - Velocity[pos_z].z;

    float3 divergence = float3(form_x, form_y, form_z);
    divergence /= grid_sz;
    
    float realpart = divergence.x + divergence.y + divergence.z;
    // 虚部为 0
    Divergence[id] = float2(
        realpart,
        0
    );
}

// Divergence [in/out]: 计算出的散度
// PossionMul [in]: 预计算
THE_THREDS
void PossionSpectral(int3 id : SV_DispatchThreadID)
{
    Divergence[id] *= PossionMul[id];
}

// Divergence [in]
// Psi1 [in/out], Psi2 [in/out]
THE_THREDS
void GaugeTransform(int3 id: SV_DispatchThreadID)
{
    float2 q = float2(
    cos(-Divergence[id].x),
    sin(-Divergence[id].x)
    );
    
    
    Psi1[id] = complexMul(Psi1[id], q);
    Psi2[id] = complexMul(Psi2[id], q);
}

// Psi1 [in/out], Psi2 [in/out]
THE_THREDS
void Normalize(int3 id : SV_DispatchThreadID)
{
    float norm = sqrt(dot(Psi1[id], Psi1[id]) + dot(Psi2[id], Psi2[id]));
    Psi1[id] /= norm;
    Psi2[id] /= norm;
}


THE_THREDS
void InitializePsi(int3 id : SV_DispatchThreadID)
{
    Psi1[id] = float2(1, 0);
    Psi2[id] = float2(0.01, 0);
    
    float norm = sqrt(dot(Psi1[id], Psi1[id]) + dot(Psi2[id], Psi2[id]));
    Psi1[id] /= norm;
    Psi2[id] /= norm;
}

THE_THREDS
void ReprojectVelocityToGrid(int3 id : SV_DispatchThreadID)
{
    float3 v = Velocity[id].xyz;
    
    v /= size / res;
    Velocity[id] = float4(v, 0);

}


